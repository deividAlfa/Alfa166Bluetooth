
tape.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080018d4  080018d4  000118d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018f8  080018f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080018f8  080018f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018f8  080018f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018f8  080018f8  000118f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018fc  080018fc  000118fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  2000000c  0800190c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  0800190c  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003207  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000eb9  00000000  00000000  0002323c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000418  00000000  00000000  000240f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000380  00000000  00000000  00024510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015ba0  00000000  00000000  00024890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000043d1  00000000  00000000  0003a430  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007bd52  00000000  00000000  0003e801  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ba553  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000df8  00000000  00000000  000ba5d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080018bc 	.word	0x080018bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080018bc 	.word	0x080018bc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fcb6 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f807 	bl	8000166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f84a 	bl	80001f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  initTape();																// Initialize tape settings
 800015c:	f000 f958 	bl	8000410 <initTape>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 handleTape();															// Handle Tape
 8000160:	f000 f96c 	bl	800043c <handleTape>
 8000164:	e7fc      	b.n	8000160 <main+0x14>

08000166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b090      	sub	sp, #64	; 0x40
 800016a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	f107 0318 	add.w	r3, r7, #24
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f001 fb99 	bl	80018ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017a:	1d3b      	adds	r3, r7, #4
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	60da      	str	r2, [r3, #12]
 8000186:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000188:	2301      	movs	r3, #1
 800018a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800018c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000190:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000192:	2300      	movs	r3, #0
 8000194:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019a:	2302      	movs	r3, #2
 800019c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 ff6e 	bl	8001090 <HAL_RCC_OscConfig>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ba:	f000 f8c5 	bl	8000348 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001be:	230f      	movs	r3, #15
 80001c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c2:	2302      	movs	r3, #2
 80001c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2102      	movs	r1, #2
 80001d8:	4618      	mov	r0, r3
 80001da:	f001 f9d9 	bl	8001590 <HAL_RCC_ClockConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e4:	f000 f8b0 	bl	8000348 <Error_Handler>
  }
}
 80001e8:	bf00      	nop
 80001ea:	3740      	adds	r7, #64	; 0x40
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b088      	sub	sp, #32
 80001f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f6:	f107 0310 	add.w	r3, r7, #16
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000204:	4b4c      	ldr	r3, [pc, #304]	; (8000338 <MX_GPIO_Init+0x148>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a4b      	ldr	r2, [pc, #300]	; (8000338 <MX_GPIO_Init+0x148>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6193      	str	r3, [r2, #24]
 8000210:	4b49      	ldr	r3, [pc, #292]	; (8000338 <MX_GPIO_Init+0x148>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f003 0310 	and.w	r3, r3, #16
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800021c:	4b46      	ldr	r3, [pc, #280]	; (8000338 <MX_GPIO_Init+0x148>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	4a45      	ldr	r2, [pc, #276]	; (8000338 <MX_GPIO_Init+0x148>)
 8000222:	f043 0320 	orr.w	r3, r3, #32
 8000226:	6193      	str	r3, [r2, #24]
 8000228:	4b43      	ldr	r3, [pc, #268]	; (8000338 <MX_GPIO_Init+0x148>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	60bb      	str	r3, [r7, #8]
 8000232:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000234:	4b40      	ldr	r3, [pc, #256]	; (8000338 <MX_GPIO_Init+0x148>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a3f      	ldr	r2, [pc, #252]	; (8000338 <MX_GPIO_Init+0x148>)
 800023a:	f043 0308 	orr.w	r3, r3, #8
 800023e:	6193      	str	r3, [r2, #24]
 8000240:	4b3d      	ldr	r3, [pc, #244]	; (8000338 <MX_GPIO_Init+0x148>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	f003 0308 	and.w	r3, r3, #8
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024c:	4b3a      	ldr	r3, [pc, #232]	; (8000338 <MX_GPIO_Init+0x148>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a39      	ldr	r2, [pc, #228]	; (8000338 <MX_GPIO_Init+0x148>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b37      	ldr	r3, [pc, #220]	; (8000338 <MX_GPIO_Init+0x148>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0304 	and.w	r3, r3, #4
 8000260:	603b      	str	r3, [r7, #0]
 8000262:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026a:	4834      	ldr	r0, [pc, #208]	; (800033c <MX_GPIO_Init+0x14c>)
 800026c:	f000 fedf 	bl	800102e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BTN_CALL_Pin|BTN_PREV_Pin|BTN_NEXT_Pin|POS_2_5_Pin
 8000270:	2200      	movs	r2, #0
 8000272:	f644 41c2 	movw	r1, #19650	; 0x4cc2
 8000276:	4832      	ldr	r0, [pc, #200]	; (8000340 <MX_GPIO_Init+0x150>)
 8000278:	f000 fed9 	bl	800102e <HAL_GPIO_WritePin>
                          |PHOTO_F_Pin|PHOTO_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POS_0_Pin|POS_1_2_Pin|ALWAYS_HIGH_Pin, GPIO_PIN_SET);
 800027c:	2201      	movs	r2, #1
 800027e:	f44f 5144 	mov.w	r1, #12544	; 0x3100
 8000282:	482f      	ldr	r0, [pc, #188]	; (8000340 <MX_GPIO_Init+0x150>)
 8000284:	f000 fed3 	bl	800102e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800028c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2302      	movs	r3, #2
 8000298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	4619      	mov	r1, r3
 80002a0:	4826      	ldr	r0, [pc, #152]	; (800033c <MX_GPIO_Init+0x14c>)
 80002a2:	f000 fd53 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_CALL_Pin BTN_PREV_Pin BTN_NEXT_Pin POS_0_Pin
                           POS_1_2_Pin POS_2_5_Pin PHOTO_F_Pin PHOTO_R_Pin */
  GPIO_InitStruct.Pin = BTN_CALL_Pin|BTN_PREV_Pin|BTN_NEXT_Pin|POS_0_Pin
 80002a6:	f647 43c2 	movw	r3, #31938	; 0x7cc2
 80002aa:	613b      	str	r3, [r7, #16]
                          |POS_1_2_Pin|POS_2_5_Pin|PHOTO_F_Pin|PHOTO_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80002ac:	2311      	movs	r3, #17
 80002ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b0:	2300      	movs	r3, #0
 80002b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b4:	2302      	movs	r3, #2
 80002b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b8:	f107 0310 	add.w	r3, r7, #16
 80002bc:	4619      	mov	r1, r3
 80002be:	4820      	ldr	r0, [pc, #128]	; (8000340 <MX_GPIO_Init+0x150>)
 80002c0:	f000 fd44 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : L_minus_Pin */
  GPIO_InitStruct.Pin = L_minus_Pin;
 80002c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ce:	2300      	movs	r3, #0
 80002d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L_minus_GPIO_Port, &GPIO_InitStruct);
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	4619      	mov	r1, r3
 80002d8:	4819      	ldr	r0, [pc, #100]	; (8000340 <MX_GPIO_Init+0x150>)
 80002da:	f000 fd37 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : L_plus_Pin MT_RVS_Pin H_SPEED_Pin MT_FWD_Pin */
  GPIO_InitStruct.Pin = L_plus_Pin|MT_RVS_Pin|H_SPEED_Pin|MT_FWD_Pin;
 80002de:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80002e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e4:	2300      	movs	r3, #0
 80002e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e8:	2300      	movs	r3, #0
 80002ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ec:	f107 0310 	add.w	r3, r7, #16
 80002f0:	4619      	mov	r1, r3
 80002f2:	4814      	ldr	r0, [pc, #80]	; (8000344 <MX_GPIO_Init+0x154>)
 80002f4:	f000 fd2a 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ALWAYS_HIGH_Pin */
  GPIO_InitStruct.Pin = ALWAYS_HIGH_Pin;
 80002f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fe:	2301      	movs	r3, #1
 8000300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000302:	2300      	movs	r3, #0
 8000304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000306:	2302      	movs	r3, #2
 8000308:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALWAYS_HIGH_GPIO_Port, &GPIO_InitStruct);
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	4619      	mov	r1, r3
 8000310:	480b      	ldr	r0, [pc, #44]	; (8000340 <MX_GPIO_Init+0x150>)
 8000312:	f000 fd1b 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : POLARITY_Pin */
  GPIO_InitStruct.Pin = POLARITY_Pin;
 8000316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800031a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800031c:	2300      	movs	r3, #0
 800031e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000320:	2302      	movs	r3, #2
 8000322:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(POLARITY_GPIO_Port, &GPIO_InitStruct);
 8000324:	f107 0310 	add.w	r3, r7, #16
 8000328:	4619      	mov	r1, r3
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_GPIO_Init+0x150>)
 800032c:	f000 fd0e 	bl	8000d4c <HAL_GPIO_Init>

}
 8000330:	bf00      	nop
 8000332:	3720      	adds	r7, #32
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40021000 	.word	0x40021000
 800033c:	40011000 	.word	0x40011000
 8000340:	40010c00 	.word	0x40010c00
 8000344:	40010800 	.word	0x40010800

08000348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800034c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034e:	e7fe      	b.n	800034e <Error_Handler+0x6>

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <HAL_MspInit+0x5c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a14      	ldr	r2, [pc, #80]	; (80003ac <HAL_MspInit+0x5c>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <HAL_MspInit+0x5c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <HAL_MspInit+0x5c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <HAL_MspInit+0x5c>)
 8000374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000378:	61d3      	str	r3, [r2, #28]
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <HAL_MspInit+0x5c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <HAL_MspInit+0x60>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <HAL_MspInit+0x60>)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40010000 	.word	0x40010000

080003b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <NMI_Handler+0x4>

080003ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003be:	e7fe      	b.n	80003be <HardFault_Handler+0x4>

080003c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <MemManage_Handler+0x4>

080003c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ca:	e7fe      	b.n	80003ca <BusFault_Handler+0x4>

080003cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <UsageFault_Handler+0x4>

080003d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr

080003de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr

080003ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fa:	f000 fba7 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}

08000402 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
	...

08000410 <initTape>:
	// VARIABLES

	tape_t	tape;
	position_t	pos;

void initTape(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	tape.status		= status_stop;															// Initial state stop
 8000414:	4b07      	ldr	r3, [pc, #28]	; (8000434 <initTape+0x24>)
 8000416:	2204      	movs	r2, #4
 8000418:	775a      	strb	r2, [r3, #29]
	pos.OutStatus	= pos_2_5V;																// Default analog status = Tape inside
 800041a:	4b07      	ldr	r3, [pc, #28]	; (8000438 <initTape+0x28>)
 800041c:	2201      	movs	r2, #1
 800041e:	701a      	strb	r2, [r3, #0]
	pos.Status		= 0;																	// First state
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <initTape+0x28>)
 8000422:	2200      	movs	r2, #0
 8000424:	721a      	strb	r2, [r3, #8]
	pos.Direction	= 1;																	// Initial position changing direction
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <initTape+0x28>)
 8000428:	2201      	movs	r2, #1
 800042a:	725a      	strb	r2, [r3, #9]
	resetButtons();																			// Set all buttons to idle
 800042c:	f000 fa8c 	bl	8000948 <resetButtons>
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	2000002c 	.word	0x2000002c
 8000438:	20000050 	.word	0x20000050

0800043c <handleTape>:

void handleTape(void){
 800043c:	b598      	push	{r3, r4, r7, lr}
 800043e:	af00      	add	r7, sp, #0

	tape.polarity	= !HAL_GPIO_ReadPin(POLARITY_GPIO_Port, POLARITY_Pin);					// Update button polarity (So it can be changed on the fly)
 8000440:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000444:	48b2      	ldr	r0, [pc, #712]	; (8000710 <handleTape+0x2d4>)
 8000446:	f000 fddb 	bl	8001000 <HAL_GPIO_ReadPin>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	bf0c      	ite	eq
 8000450:	2301      	moveq	r3, #1
 8000452:	2300      	movne	r3, #0
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4baf      	ldr	r3, [pc, #700]	; (8000714 <handleTape+0x2d8>)
 8000458:	f883 2020 	strb.w	r2, [r3, #32]
	handlePosSensor();																		// Handle position sensor
 800045c:	f000 f95e 	bl	800071c <handlePosSensor>

	  /*********************************************************************************************************************
	   * 	Check Forward/Reverse inputs
	   *********************************************************************************************************************/
	  if(L_Plus && L_Minus){																// L+ =1 and L- =1, this means Tape active in a stable state
 8000460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000464:	48ac      	ldr	r0, [pc, #688]	; (8000718 <handleTape+0x2dc>)
 8000466:	f000 fdcb 	bl	8001000 <HAL_GPIO_ReadPin>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	f000 8107 	beq.w	8000680 <handleTape+0x244>
 8000472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000476:	48a6      	ldr	r0, [pc, #664]	; (8000710 <handleTape+0x2d4>)
 8000478:	f000 fdc2 	bl	8001000 <HAL_GPIO_ReadPin>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	f000 80fe 	beq.w	8000680 <handleTape+0x244>
		  if(MT_Rev || MT_Fwd){
 8000484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000488:	48a3      	ldr	r0, [pc, #652]	; (8000718 <handleTape+0x2dc>)
 800048a:	f000 fdb9 	bl	8001000 <HAL_GPIO_ReadPin>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d108      	bne.n	80004a6 <handleTape+0x6a>
 8000494:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000498:	489f      	ldr	r0, [pc, #636]	; (8000718 <handleTape+0x2dc>)
 800049a:	f000 fdb1 	bl	8001000 <HAL_GPIO_ReadPin>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	f000 80ed 	beq.w	8000680 <handleTape+0x244>
			  if( ((HAL_GetTick()-tape.freqPhotoTimer) >pulseDelay ) && tape.enablePhoto){	// Simulate the photo sensor pulses if active flag
 80004a6:	f000 fb63 	bl	8000b70 <HAL_GetTick>
 80004aa:	4602      	mov	r2, r0
 80004ac:	4b99      	ldr	r3, [pc, #612]	; (8000714 <handleTape+0x2d8>)
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	1ad3      	subs	r3, r2, r3
 80004b2:	2b0a      	cmp	r3, #10
 80004b4:	d911      	bls.n	80004da <handleTape+0x9e>
 80004b6:	4b97      	ldr	r3, [pc, #604]	; (8000714 <handleTape+0x2d8>)
 80004b8:	7fdb      	ldrb	r3, [r3, #31]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d00c      	beq.n	80004da <handleTape+0x9e>
				  tape.freqPhotoTimer	= HAL_GetTick();
 80004c0:	f000 fb56 	bl	8000b70 <HAL_GetTick>
 80004c4:	4602      	mov	r2, r0
 80004c6:	4b93      	ldr	r3, [pc, #588]	; (8000714 <handleTape+0x2d8>)
 80004c8:	609a      	str	r2, [r3, #8]
				  HAL_GPIO_TogglePin(PHOTO_R_GPIO_Port, PHOTO_R_Pin);						// Toggle both sensors (they can be joined together)
 80004ca:	2180      	movs	r1, #128	; 0x80
 80004cc:	4890      	ldr	r0, [pc, #576]	; (8000710 <handleTape+0x2d4>)
 80004ce:	f000 fdc6 	bl	800105e <HAL_GPIO_TogglePin>
				  HAL_GPIO_TogglePin(PHOTO_F_GPIO_Port, PHOTO_F_Pin);						// I use separated pins just in case something else can be done in the future
 80004d2:	2140      	movs	r1, #64	; 0x40
 80004d4:	488e      	ldr	r0, [pc, #568]	; (8000710 <handleTape+0x2d4>)
 80004d6:	f000 fdc2 	bl	800105e <HAL_GPIO_TogglePin>
			  }
			  if(!H_Speed){																	// Not in in fast speed (revPlay or fwdPlay mode)
 80004da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004de:	488e      	ldr	r0, [pc, #568]	; (8000718 <handleTape+0x2dc>)
 80004e0:	f000 fd8e 	bl	8001000 <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d164      	bne.n	80005b4 <handleTape+0x178>
				  if(MT_Rev){
 80004ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ee:	488a      	ldr	r0, [pc, #552]	; (8000718 <handleTape+0x2dc>)
 80004f0:	f000 fd86 	bl	8001000 <HAL_GPIO_ReadPin>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d00f      	beq.n	800051a <handleTape+0xde>
					  if( (tape.status==status_play) && (tape.playMode!=revPlay) ){			// Tape direction changed while in play mode
 80004fa:	4b86      	ldr	r3, [pc, #536]	; (8000714 <handleTape+0x2d8>)
 80004fc:	7f5b      	ldrb	r3, [r3, #29]
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2b05      	cmp	r3, #5
 8000502:	d107      	bne.n	8000514 <handleTape+0xd8>
 8000504:	4b83      	ldr	r3, [pc, #524]	; (8000714 <handleTape+0x2d8>)
 8000506:	7d5b      	ldrb	r3, [r3, #21]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b09      	cmp	r3, #9
 800050c:	d002      	beq.n	8000514 <handleTape+0xd8>
						  setButton(btn_call);
 800050e:	200c      	movs	r0, #12
 8000510:	f000 f9d6 	bl	80008c0 <setButton>
					  }
					  tape.playMode	= revPlay;												// Update play mode (reverse)
 8000514:	4b7f      	ldr	r3, [pc, #508]	; (8000714 <handleTape+0x2d8>)
 8000516:	2209      	movs	r2, #9
 8000518:	755a      	strb	r2, [r3, #21]
				  }

				  if(MT_Fwd){
 800051a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051e:	487e      	ldr	r0, [pc, #504]	; (8000718 <handleTape+0x2dc>)
 8000520:	f000 fd6e 	bl	8001000 <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00f      	beq.n	800054a <handleTape+0x10e>
					  if( (tape.status==status_play) && (tape.playMode!=fwdPlay) ){			// Tape direction changed while in play mode
 800052a:	4b7a      	ldr	r3, [pc, #488]	; (8000714 <handleTape+0x2d8>)
 800052c:	7f5b      	ldrb	r3, [r3, #29]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b05      	cmp	r3, #5
 8000532:	d107      	bne.n	8000544 <handleTape+0x108>
 8000534:	4b77      	ldr	r3, [pc, #476]	; (8000714 <handleTape+0x2d8>)
 8000536:	7d5b      	ldrb	r3, [r3, #21]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b08      	cmp	r3, #8
 800053c:	d002      	beq.n	8000544 <handleTape+0x108>
						  setButton(btn_call);
 800053e:	200c      	movs	r0, #12
 8000540:	f000 f9be 	bl	80008c0 <setButton>
					  }
					  tape.playMode	= fwdPlay;												// Update play mode (forward)
 8000544:	4b73      	ldr	r3, [pc, #460]	; (8000714 <handleTape+0x2d8>)
 8000546:	2208      	movs	r2, #8
 8000548:	755a      	strb	r2, [r3, #21]
				  }

				  if(tape.status!=status_play){												// Wasn't in play mode before?
 800054a:	4b72      	ldr	r3, [pc, #456]	; (8000714 <handleTape+0x2d8>)
 800054c:	7f5b      	ldrb	r3, [r3, #29]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	2b05      	cmp	r3, #5
 8000552:	f000 8095 	beq.w	8000680 <handleTape+0x244>
					  tape.enablePhoto	= 1;												// Enable photo sensor
 8000556:	4b6f      	ldr	r3, [pc, #444]	; (8000714 <handleTape+0x2d8>)
 8000558:	2201      	movs	r2, #1
 800055a:	77da      	strb	r2, [r3, #31]
					  tape.playTimer	= HAL_GetTick();									// Time when playing started
 800055c:	f000 fb08 	bl	8000b70 <HAL_GetTick>
 8000560:	4602      	mov	r2, r0
 8000562:	4b6c      	ldr	r3, [pc, #432]	; (8000714 <handleTape+0x2d8>)
 8000564:	605a      	str	r2, [r3, #4]

					  if( (tape.status==status_ffwd)||(tape.status==status_frwd) ){			// Was in a fast mode before?
 8000566:	4b6b      	ldr	r3, [pc, #428]	; (8000714 <handleTape+0x2d8>)
 8000568:	7f5b      	ldrb	r3, [r3, #29]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2b07      	cmp	r3, #7
 800056e:	d004      	beq.n	800057a <handleTape+0x13e>
 8000570:	4b68      	ldr	r3, [pc, #416]	; (8000714 <handleTape+0x2d8>)
 8000572:	7f5b      	ldrb	r3, [r3, #29]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b06      	cmp	r3, #6
 8000578:	d118      	bne.n	80005ac <handleTape+0x170>
						  if( (HAL_GetTick()-tape.fastTimer) < btnRepTim){					// Check the timer, if it's low, the user exited fast mode by pushing the button again (Repeat button push)
 800057a:	f000 faf9 	bl	8000b70 <HAL_GetTick>
 800057e:	4602      	mov	r2, r0
 8000580:	4b64      	ldr	r3, [pc, #400]	; (8000714 <handleTape+0x2d8>)
 8000582:	691b      	ldr	r3, [r3, #16]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800058a:	d20f      	bcs.n	80005ac <handleTape+0x170>
							  if(tape.btnLast==btn_prev){									// Previous track button was pushed
 800058c:	4b61      	ldr	r3, [pc, #388]	; (8000714 <handleTape+0x2d8>)
 800058e:	7f1b      	ldrb	r3, [r3, #28]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b0b      	cmp	r3, #11
 8000594:	d102      	bne.n	800059c <handleTape+0x160>
								  setButton(btn_prev);										// Repeat
 8000596:	200b      	movs	r0, #11
 8000598:	f000 f992 	bl	80008c0 <setButton>
							  }
							  if(tape.btnLast==btn_next){									// Next track button was pushed
 800059c:	4b5d      	ldr	r3, [pc, #372]	; (8000714 <handleTape+0x2d8>)
 800059e:	7f1b      	ldrb	r3, [r3, #28]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b0a      	cmp	r3, #10
 80005a4:	d102      	bne.n	80005ac <handleTape+0x170>
								  setButton(btn_next);										// Repeat
 80005a6:	200a      	movs	r0, #10
 80005a8:	f000 f98a 	bl	80008c0 <setButton>
							  }
						  }
					  }
					  tape.status	= status_play;											// In any case, now we are in play mode
 80005ac:	4b59      	ldr	r3, [pc, #356]	; (8000714 <handleTape+0x2d8>)
 80005ae:	2205      	movs	r2, #5
 80005b0:	775a      	strb	r2, [r3, #29]
 80005b2:	e065      	b.n	8000680 <handleTape+0x244>
				  }
			  }
			  else{																			// In high speed mode (Fast Rewind or Fast Forward)
				  if(MT_Fwd^MT_Rev){														// What direction?
 80005b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b8:	4857      	ldr	r0, [pc, #348]	; (8000718 <handleTape+0x2dc>)
 80005ba:	f000 fd21 	bl	8001000 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	461c      	mov	r4, r3
 80005c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c6:	4854      	ldr	r0, [pc, #336]	; (8000718 <handleTape+0x2dc>)
 80005c8:	f000 fd1a 	bl	8001000 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	429c      	cmp	r4, r3
 80005d0:	d056      	beq.n	8000680 <handleTape+0x244>
					  if( (tape.status!=status_frwd) && (tape.status!=status_ffwd) ){		// Wasn't in Fast mode before?
 80005d2:	4b50      	ldr	r3, [pc, #320]	; (8000714 <handleTape+0x2d8>)
 80005d4:	7f5b      	ldrb	r3, [r3, #29]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b06      	cmp	r3, #6
 80005da:	d051      	beq.n	8000680 <handleTape+0x244>
 80005dc:	4b4d      	ldr	r3, [pc, #308]	; (8000714 <handleTape+0x2d8>)
 80005de:	7f5b      	ldrb	r3, [r3, #29]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	d04c      	beq.n	8000680 <handleTape+0x244>
						  tape.skipCnt++;													// Increase skipped track count
 80005e6:	4b4b      	ldr	r3, [pc, #300]	; (8000714 <handleTape+0x2d8>)
 80005e8:	7d1b      	ldrb	r3, [r3, #20]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	3301      	adds	r3, #1
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b48      	ldr	r3, [pc, #288]	; (8000714 <handleTape+0x2d8>)
 80005f2:	751a      	strb	r2, [r3, #20]
						  tape.delayPhotoTimer	= HAL_GetTick();							// Update photo sensor disable timer
 80005f4:	f000 fabc 	bl	8000b70 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	4b46      	ldr	r3, [pc, #280]	; (8000714 <handleTape+0x2d8>)
 80005fc:	601a      	str	r2, [r3, #0]
						  tape.fastTimer		= HAL_GetTick();						  	// Fast mode timer
 80005fe:	f000 fab7 	bl	8000b70 <HAL_GetTick>
 8000602:	4602      	mov	r2, r0
 8000604:	4b43      	ldr	r3, [pc, #268]	; (8000714 <handleTape+0x2d8>)
 8000606:	611a      	str	r2, [r3, #16]

						  if(MT_Fwd){														// Tape mechanism in Fast Forward mode
 8000608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060c:	4842      	ldr	r0, [pc, #264]	; (8000718 <handleTape+0x2dc>)
 800060e:	f000 fcf7 	bl	8001000 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d015      	beq.n	8000644 <handleTape+0x208>
							  if(tape.playMode==revPlay){									// Was playing in reverse mode?
 8000618:	4b3e      	ldr	r3, [pc, #248]	; (8000714 <handleTape+0x2d8>)
 800061a:	7d5b      	ldrb	r3, [r3, #21]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b09      	cmp	r3, #9
 8000620:	d105      	bne.n	800062e <handleTape+0x1f2>
								  tape.status	= status_frwd;								// Now we are in fast rewind
 8000622:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <handleTape+0x2d8>)
 8000624:	2206      	movs	r2, #6
 8000626:	775a      	strb	r2, [r3, #29]
								  setButton(btn_prev);										// Send pulse to previous track button
 8000628:	200b      	movs	r0, #11
 800062a:	f000 f949 	bl	80008c0 <setButton>
							  }
							  if(tape.playMode==fwdPlay){									// Was playing in forward mode?
 800062e:	4b39      	ldr	r3, [pc, #228]	; (8000714 <handleTape+0x2d8>)
 8000630:	7d5b      	ldrb	r3, [r3, #21]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b08      	cmp	r3, #8
 8000636:	d105      	bne.n	8000644 <handleTape+0x208>
								  tape.status	= status_ffwd;								// Now we are in fast forward
 8000638:	4b36      	ldr	r3, [pc, #216]	; (8000714 <handleTape+0x2d8>)
 800063a:	2207      	movs	r2, #7
 800063c:	775a      	strb	r2, [r3, #29]
								  setButton(btn_next);										// Send pulse to next track button
 800063e:	200a      	movs	r0, #10
 8000640:	f000 f93e 	bl	80008c0 <setButton>
							  }
						  }

						  if(MT_Rev){														// Tape mechanism in Fast Rewind mode
 8000644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000648:	4833      	ldr	r0, [pc, #204]	; (8000718 <handleTape+0x2dc>)
 800064a:	f000 fcd9 	bl	8001000 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d015      	beq.n	8000680 <handleTape+0x244>
							  if(tape.playMode==revPlay){									// Was playing in reverse mode?
 8000654:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <handleTape+0x2d8>)
 8000656:	7d5b      	ldrb	r3, [r3, #21]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b09      	cmp	r3, #9
 800065c:	d105      	bne.n	800066a <handleTape+0x22e>
								  tape.status=status_ffwd;									// Now we are in fast forward
 800065e:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <handleTape+0x2d8>)
 8000660:	2207      	movs	r2, #7
 8000662:	775a      	strb	r2, [r3, #29]
								  setButton(btn_next);										// Send pulse to next track button
 8000664:	200a      	movs	r0, #10
 8000666:	f000 f92b 	bl	80008c0 <setButton>
							  }
							  if(tape.playMode==fwdPlay){									// Was playing in forward mode?
 800066a:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <handleTape+0x2d8>)
 800066c:	7d5b      	ldrb	r3, [r3, #21]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b08      	cmp	r3, #8
 8000672:	d105      	bne.n	8000680 <handleTape+0x244>
								  tape.status=status_frwd;									// Now we are in fast rewind
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <handleTape+0x2d8>)
 8000676:	2206      	movs	r2, #6
 8000678:	775a      	strb	r2, [r3, #29]
								  setButton(btn_prev);										// Send pulse to previous track button
 800067a:	200b      	movs	r0, #11
 800067c:	f000 f920 	bl	80008c0 <setButton>
					  }
				  }
			  }
		  }
	  }
	  if((tape.status==status_frwd) || (tape.status==status_ffwd)){							// If in fast mode (Fast rewind or Fast forward)
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <handleTape+0x2d8>)
 8000682:	7f5b      	ldrb	r3, [r3, #29]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b06      	cmp	r3, #6
 8000688:	d004      	beq.n	8000694 <handleTape+0x258>
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <handleTape+0x2d8>)
 800068c:	7f5b      	ldrb	r3, [r3, #29]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b07      	cmp	r3, #7
 8000692:	d114      	bne.n	80006be <handleTape+0x282>
		  if(tape.skipCnt>=MAX_FAST_SKIP){													// Check we didn't skip more than 3 tracks in quick mode
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <handleTape+0x2d8>)
 8000696:	7d1b      	ldrb	r3, [r3, #20]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b03      	cmp	r3, #3
 800069c:	d90c      	bls.n	80006b8 <handleTape+0x27c>
			  if((HAL_GetTick()-tape.delayPhotoTimer)>longPhotoDelay){						// Otherwise wait the delay to avoid tape error triggering (Or tape controller will think the  tape is stuck)
 800069e:	f000 fa67 	bl	8000b70 <HAL_GetTick>
 80006a2:	4602      	mov	r2, r0
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <handleTape+0x2d8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80006ae:	d906      	bls.n	80006be <handleTape+0x282>
				  tape.skipCnt	= 0;														// Once the delay is done, Reset count
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <handleTape+0x2d8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	751a      	strb	r2, [r3, #20]
 80006b6:	e002      	b.n	80006be <handleTape+0x282>
			  }
		  }
		  else{																				// If less than 3 consecutively skipped tracks, no delay applied
			  tape.enablePhoto	= 0;  	  	  	  	  	  	  	  	  	  	  	 			// Disable photo sensor pulses to simulate end of tape (back to play mode)
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <handleTape+0x2d8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	77da      	strb	r2, [r3, #31]
		  }
	  }
	  if(tape.skipCnt){																		// If there's any value in the skipped track counter
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <handleTape+0x2d8>)
 80006c0:	7d1b      	ldrb	r3, [r3, #20]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d010      	beq.n	80006ea <handleTape+0x2ae>
		  if((tape.status==status_play) && (HAL_GetTick()-tape.playTimer)>resetTimeOnPlay){	// If in play mode for more than 2 seconds
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <handleTape+0x2d8>)
 80006ca:	7f5b      	ldrb	r3, [r3, #29]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b05      	cmp	r3, #5
 80006d0:	d10b      	bne.n	80006ea <handleTape+0x2ae>
 80006d2:	f000 fa4d 	bl	8000b70 <HAL_GetTick>
 80006d6:	4602      	mov	r2, r0
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <handleTape+0x2d8>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006e2:	d902      	bls.n	80006ea <handleTape+0x2ae>
			  tape.skipCnt		= 0;														// Reset the counter
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <handleTape+0x2d8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	751a      	strb	r2, [r3, #20]
		  }
	  }
	  if(tape.btnPushed){																	// If any button was pushed
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <handleTape+0x2d8>)
 80006ec:	7f9b      	ldrb	r3, [r3, #30]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d009      	beq.n	8000708 <handleTape+0x2cc>
		  if((HAL_GetTick()-tape.btnTimer)>btnDelay){										// If the button timer has expired
 80006f4:	f000 fa3c 	bl	8000b70 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <handleTape+0x2d8>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	2b64      	cmp	r3, #100	; 0x64
 8000702:	d901      	bls.n	8000708 <handleTape+0x2cc>
			  resetButtons();																// Reset all the buttons
 8000704:	f000 f920 	bl	8000948 <resetButtons>
		  }
	  }

	  handleLed();																			// Handle led status
 8000708:	f000 f950 	bl	80009ac <handleLed>
}
 800070c:	bf00      	nop
 800070e:	bd98      	pop	{r3, r4, r7, pc}
 8000710:	40010c00 	.word	0x40010c00
 8000714:	2000002c 	.word	0x2000002c
 8000718:	40010800 	.word	0x40010800

0800071c <handlePosSensor>:
 *		As long as the motor spins, we keep switching between the analog voltages with a small delay.
 *		2.5V <> 1.2V <> 0V
 *
 *		When the tape controller finds the correct position, it stops the motor setting both L+ and L- high
 *********************************************************************************************************************/
void handlePosSensor(void){
 800071c:	b598      	push	{r3, r4, r7, lr}
 800071e:	af00      	add	r7, sp, #0
	  if(L_Plus ^ L_Minus ){																// Only L+ =1 or L- =1. this means tape position is moving
 8000720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000724:	4862      	ldr	r0, [pc, #392]	; (80008b0 <handlePosSensor+0x194>)
 8000726:	f000 fc6b 	bl	8001000 <HAL_GPIO_ReadPin>
 800072a:	4603      	mov	r3, r0
 800072c:	461c      	mov	r4, r3
 800072e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000732:	4860      	ldr	r0, [pc, #384]	; (80008b4 <handlePosSensor+0x198>)
 8000734:	f000 fc64 	bl	8001000 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	429c      	cmp	r4, r3
 800073c:	d040      	beq.n	80007c0 <handlePosSensor+0xa4>

		  switch(pos.Status){																// Switch internal state
 800073e:	4b5e      	ldr	r3, [pc, #376]	; (80008b8 <handlePosSensor+0x19c>)
 8000740:	7a1b      	ldrb	r3, [r3, #8]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2b01      	cmp	r3, #1
 8000746:	d00c      	beq.n	8000762 <handlePosSensor+0x46>
 8000748:	2b02      	cmp	r3, #2
 800074a:	d016      	beq.n	800077a <handlePosSensor+0x5e>
 800074c:	2b00      	cmp	r3, #0
 800074e:	d133      	bne.n	80007b8 <handlePosSensor+0x9c>
				case 0:																		// Status 0, Load position Delay
					pos.Timer	= HAL_GetTick();											// Load timer
 8000750:	f000 fa0e 	bl	8000b70 <HAL_GetTick>
 8000754:	4602      	mov	r2, r0
 8000756:	4b58      	ldr	r3, [pc, #352]	; (80008b8 <handlePosSensor+0x19c>)
 8000758:	605a      	str	r2, [r3, #4]
					pos.Status	= 1;														// Set status 1
 800075a:	4b57      	ldr	r3, [pc, #348]	; (80008b8 <handlePosSensor+0x19c>)
 800075c:	2201      	movs	r2, #1
 800075e:	721a      	strb	r2, [r3, #8]
					break;
 8000760:	e031      	b.n	80007c6 <handlePosSensor+0xaa>

				case 1:																		// Status 1, wait position Delay to let the controller process the status and turn on/off the position motor
					if((HAL_GetTick()-pos.Timer)>positionDelay){							// If position Delay time elapsed
 8000762:	f000 fa05 	bl	8000b70 <HAL_GetTick>
 8000766:	4602      	mov	r2, r0
 8000768:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <handlePosSensor+0x19c>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	2b50      	cmp	r3, #80	; 0x50
 8000770:	d928      	bls.n	80007c4 <handlePosSensor+0xa8>
						pos.Status	= 2;													// Set Status 2
 8000772:	4b51      	ldr	r3, [pc, #324]	; (80008b8 <handlePosSensor+0x19c>)
 8000774:	2202      	movs	r2, #2
 8000776:	721a      	strb	r2, [r3, #8]
					}
					break;
 8000778:	e024      	b.n	80007c4 <handlePosSensor+0xa8>

				case 2:																		// Status 2, change position
					pos.OutStatus += pos.Direction;											// Change position (will add or subtract 1 to the position depending on the direction)
 800077a:	4b4f      	ldr	r3, [pc, #316]	; (80008b8 <handlePosSensor+0x19c>)
 800077c:	7a5b      	ldrb	r3, [r3, #9]
 800077e:	b259      	sxtb	r1, r3
 8000780:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <handlePosSensor+0x19c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	b2cb      	uxtb	r3, r1
 8000788:	4413      	add	r3, r2
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <handlePosSensor+0x19c>)
 800078e:	701a      	strb	r2, [r3, #0]
					if(pos.OutStatus==MIN_POS){												// If reached maximum position
 8000790:	4b49      	ldr	r3, [pc, #292]	; (80008b8 <handlePosSensor+0x19c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b01      	cmp	r3, #1
 8000798:	d102      	bne.n	80007a0 <handlePosSensor+0x84>
						pos.Direction	= 1;												// Reverse direction
 800079a:	4b47      	ldr	r3, [pc, #284]	; (80008b8 <handlePosSensor+0x19c>)
 800079c:	2201      	movs	r2, #1
 800079e:	725a      	strb	r2, [r3, #9]

					}
					if(pos.OutStatus==MAX_POS){												// If reached minimum position
 80007a0:	4b45      	ldr	r3, [pc, #276]	; (80008b8 <handlePosSensor+0x19c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d102      	bne.n	80007b0 <handlePosSensor+0x94>
						pos.Direction	= -1;												// Reverse direction
 80007aa:	4b43      	ldr	r3, [pc, #268]	; (80008b8 <handlePosSensor+0x19c>)
 80007ac:	22ff      	movs	r2, #255	; 0xff
 80007ae:	725a      	strb	r2, [r3, #9]
					}
					pos.Status	= 0;														// Set Status 0, restart the cycle
 80007b0:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <handlePosSensor+0x19c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	721a      	strb	r2, [r3, #8]
					break;
 80007b6:	e006      	b.n	80007c6 <handlePosSensor+0xaa>

				default:																	// We shouldn't get here
					pos.Status	= 0;														// If this happens, set the default state
 80007b8:	4b3f      	ldr	r3, [pc, #252]	; (80008b8 <handlePosSensor+0x19c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	721a      	strb	r2, [r3, #8]
					break;
 80007be:	e002      	b.n	80007c6 <handlePosSensor+0xaa>
		  }
	  }
 80007c0:	bf00      	nop
 80007c2:	e000      	b.n	80007c6 <handlePosSensor+0xaa>
					break;
 80007c4:	bf00      	nop
	  if(!L_Plus && !L_Minus && (tape.status!=status_stop) ){								// L+ =0 and L- =0, this means tape disabled (ICS not in Tape mode)
 80007c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ca:	4839      	ldr	r0, [pc, #228]	; (80008b0 <handlePosSensor+0x194>)
 80007cc:	f000 fc18 	bl	8001000 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d115      	bne.n	8000802 <handlePosSensor+0xe6>
 80007d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007da:	4836      	ldr	r0, [pc, #216]	; (80008b4 <handlePosSensor+0x198>)
 80007dc:	f000 fc10 	bl	8001000 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10d      	bne.n	8000802 <handlePosSensor+0xe6>
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <handlePosSensor+0x1a0>)
 80007e8:	7f5b      	ldrb	r3, [r3, #29]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	d008      	beq.n	8000802 <handlePosSensor+0xe6>
		  pos.OutStatus		= pos_2_5V;														// Reset everything
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <handlePosSensor+0x19c>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
		  tape.enablePhoto	= 1;
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <handlePosSensor+0x1a0>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	77da      	strb	r2, [r3, #31]
		  tape.status		= status_stop;
 80007fc:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <handlePosSensor+0x1a0>)
 80007fe:	2204      	movs	r2, #4
 8000800:	775a      	strb	r2, [r3, #29]
	  /*********************************************************************************************************************
	   * 	Set the outputs for the analog sensor based on the position status
	   * 	SET = open drain, pin Hi-Z.
	   * 	RESET = Set to Gnd
	   *********************************************************************************************************************/
	  switch(pos.OutStatus){																// Set the analog position ("POS. SEN" pin)
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <handlePosSensor+0x19c>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b03      	cmp	r3, #3
 800080a:	d84b      	bhi.n	80008a4 <handlePosSensor+0x188>
 800080c:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <handlePosSensor+0xf8>)
 800080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000812:	bf00      	nop
 8000814:	08000825 	.word	0x08000825
 8000818:	0800084b 	.word	0x0800084b
 800081c:	08000871 	.word	0x08000871
 8000820:	08000897 	.word	0x08000897
		  case pos_5V:
			  HAL_GPIO_WritePin(POS_2_5_GPIO_Port,POS_2_5_Pin,SET);							// All the pins floating
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082a:	4822      	ldr	r0, [pc, #136]	; (80008b4 <handlePosSensor+0x198>)
 800082c:	f000 fbff 	bl	800102e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(POS_1_2_GPIO_Port,POS_1_2_Pin,SET);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000836:	481f      	ldr	r0, [pc, #124]	; (80008b4 <handlePosSensor+0x198>)
 8000838:	f000 fbf9 	bl	800102e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(POS_0_GPIO_Port,POS_0_Pin,SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000842:	481c      	ldr	r0, [pc, #112]	; (80008b4 <handlePosSensor+0x198>)
 8000844:	f000 fbf3 	bl	800102e <HAL_GPIO_WritePin>
			  break;
 8000848:	e02f      	b.n	80008aa <handlePosSensor+0x18e>

		  case pos_2_5V:																	// 6.8K resistor to ground
			  HAL_GPIO_WritePin(POS_2_5_GPIO_Port,POS_2_5_Pin,RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000850:	4818      	ldr	r0, [pc, #96]	; (80008b4 <handlePosSensor+0x198>)
 8000852:	f000 fbec 	bl	800102e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(POS_1_2_GPIO_Port,POS_1_2_Pin,SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085c:	4815      	ldr	r0, [pc, #84]	; (80008b4 <handlePosSensor+0x198>)
 800085e:	f000 fbe6 	bl	800102e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(POS_0_GPIO_Port,POS_0_Pin,SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000868:	4812      	ldr	r0, [pc, #72]	; (80008b4 <handlePosSensor+0x198>)
 800086a:	f000 fbe0 	bl	800102e <HAL_GPIO_WritePin>
			  break;
 800086e:	e01c      	b.n	80008aa <handlePosSensor+0x18e>

		  case pos_1_2V:																	// 2.2K resistor to ground
			  HAL_GPIO_WritePin(POS_2_5_GPIO_Port,POS_2_5_Pin,SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000876:	480f      	ldr	r0, [pc, #60]	; (80008b4 <handlePosSensor+0x198>)
 8000878:	f000 fbd9 	bl	800102e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(POS_1_2_GPIO_Port,POS_1_2_Pin,RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000882:	480c      	ldr	r0, [pc, #48]	; (80008b4 <handlePosSensor+0x198>)
 8000884:	f000 fbd3 	bl	800102e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(POS_0_GPIO_Port,POS_0_Pin,SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088e:	4809      	ldr	r0, [pc, #36]	; (80008b4 <handlePosSensor+0x198>)
 8000890:	f000 fbcd 	bl	800102e <HAL_GPIO_WritePin>
			  break;
 8000894:	e009      	b.n	80008aa <handlePosSensor+0x18e>

		  case pos_0V:																		// Direct to ground (Doesn't matter the others)
			  HAL_GPIO_WritePin(POS_0_GPIO_Port,POS_0_Pin,RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <handlePosSensor+0x198>)
 800089e:	f000 fbc6 	bl	800102e <HAL_GPIO_WritePin>
			  break;
 80008a2:	e002      	b.n	80008aa <handlePosSensor+0x18e>

		  default:
			  pos.OutStatus	= pos_2_5V;
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <handlePosSensor+0x19c>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
	  }
}
 80008aa:	bf00      	nop
 80008ac:	bd98      	pop	{r3, r4, r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40010800 	.word	0x40010800
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	20000050 	.word	0x20000050
 80008bc:	2000002c 	.word	0x2000002c

080008c0 <setButton>:

void setButton(uint8_t btn){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	tape.btnLast	= btn;																	// Store button
 80008ca:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <setButton+0x80>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	7713      	strb	r3, [r2, #28]
	tape.btnPushed	= 1;																	// Set flag
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <setButton+0x80>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	779a      	strb	r2, [r3, #30]
	tape.btnTimer	= HAL_GetTick();														// Load timer
 80008d6:	f000 f94b 	bl	8000b70 <HAL_GetTick>
 80008da:	4602      	mov	r2, r0
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <setButton+0x80>)
 80008de:	619a      	str	r2, [r3, #24]

	switch(btn){																			// Find what button to enable
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	2b0b      	cmp	r3, #11
 80008e4:	d004      	beq.n	80008f0 <setButton+0x30>
 80008e6:	2b0c      	cmp	r3, #12
 80008e8:	d018      	beq.n	800091c <setButton+0x5c>
 80008ea:	2b0a      	cmp	r3, #10
 80008ec:	d00b      	beq.n	8000906 <setButton+0x46>
 80008ee:	e01f      	b.n	8000930 <setButton+0x70>

		case btn_prev:																		// Previous track button
			HAL_GPIO_WritePin(BTN_PREV_GPIO_Port,BTN_PREV_Pin,tape.polarity);				// Set output depending on the polarity
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <setButton+0x80>)
 80008f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	461a      	mov	r2, r3
 80008fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fe:	4811      	ldr	r0, [pc, #68]	; (8000944 <setButton+0x84>)
 8000900:	f000 fb95 	bl	800102e <HAL_GPIO_WritePin>
			break;
 8000904:	e017      	b.n	8000936 <setButton+0x76>

		case btn_next:																		// Next track button
			HAL_GPIO_WritePin(BTN_NEXT_GPIO_Port,BTN_NEXT_Pin,tape.polarity);				// Set output depending on the polarity
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <setButton+0x80>)
 8000908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <setButton+0x84>)
 8000916:	f000 fb8a 	bl	800102e <HAL_GPIO_WritePin>
			break;
 800091a:	e00c      	b.n	8000936 <setButton+0x76>

		case btn_call:																		// Call button
			HAL_GPIO_WritePin(BTN_CALL_GPIO_Port,BTN_CALL_Pin,tape.polarity);				// Set output depending on the polarity
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <setButton+0x80>)
 800091e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	461a      	mov	r2, r3
 8000926:	2102      	movs	r1, #2
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <setButton+0x84>)
 800092a:	f000 fb80 	bl	800102e <HAL_GPIO_WritePin>
			break;
 800092e:	e002      	b.n	8000936 <setButton+0x76>

		default:																			// We shouldn't get any unknown value
			resetButtons();																	// If this happens,clear all the buttons
 8000930:	f000 f80a 	bl	8000948 <resetButtons>
			break;
 8000934:	bf00      	nop
	}
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000002c 	.word	0x2000002c
 8000944:	40010c00 	.word	0x40010c00

08000948 <resetButtons>:

void resetButtons(void){
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	tape.btnPushed	= 0;																		// Clear flag
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <resetButtons+0x5c>)
 800094e:	2200      	movs	r2, #0
 8000950:	779a      	strb	r2, [r3, #30]
	HAL_GPIO_WritePin(BTN_PREV_GPIO_Port,BTN_PREV_Pin,!tape.polarity);						// Set all buttons to idle state depending on the polarity
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <resetButtons+0x5c>)
 8000954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	f083 0301 	eor.w	r3, r3, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000966:	4810      	ldr	r0, [pc, #64]	; (80009a8 <resetButtons+0x60>)
 8000968:	f000 fb61 	bl	800102e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_NEXT_GPIO_Port,BTN_NEXT_Pin,!tape.polarity);
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <resetButtons+0x5c>)
 800096e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	f083 0301 	eor.w	r3, r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <resetButtons+0x60>)
 8000982:	f000 fb54 	bl	800102e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_CALL_GPIO_Port,BTN_CALL_Pin,!tape.polarity);
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <resetButtons+0x5c>)
 8000988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f083 0301 	eor.w	r3, r3, #1
 8000992:	b2db      	uxtb	r3, r3
 8000994:	461a      	mov	r2, r3
 8000996:	2102      	movs	r1, #2
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <resetButtons+0x60>)
 800099a:	f000 fb48 	bl	800102e <HAL_GPIO_WritePin>
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000002c 	.word	0x2000002c
 80009a8:	40010c00 	.word	0x40010c00

080009ac <handleLed>:

void handleLed(void){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	static uint32_t time	= 0;																	// Internal variable for timing the blinking times, only initial state = 0
	if(tape.status!=status_stop){															// If not in stop mode
 80009b0:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <handleLed+0xbc>)
 80009b2:	7f5b      	ldrb	r3, [r3, #29]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	d023      	beq.n	8000a02 <handleLed+0x56>
		if(tape.status!=status_play){														// If not in play mode
 80009ba:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <handleLed+0xbc>)
 80009bc:	7f5b      	ldrb	r3, [r3, #29]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b05      	cmp	r3, #5
 80009c2:	d006      	beq.n	80009d2 <handleLed+0x26>
			HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin, RESET);								// We are in fast mode, set the LED steady on
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ca:	4828      	ldr	r0, [pc, #160]	; (8000a6c <handleLed+0xc0>)
 80009cc:	f000 fb2f 	bl	800102e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin, RESET);							// Turn the LED on
				time	= HAL_GetTick();													// Load timer
			}
		}
	}
}
 80009d0:	e047      	b.n	8000a62 <handleLed+0xb6>
		else if(tape.status==status_play){													// We are in play mode,quick led blinking
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <handleLed+0xbc>)
 80009d4:	7f5b      	ldrb	r3, [r3, #29]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b05      	cmp	r3, #5
 80009da:	d142      	bne.n	8000a62 <handleLed+0xb6>
			if(HAL_GetTick()-time>50){														// If time elapsed > 50mS
 80009dc:	f000 f8c8 	bl	8000b70 <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <handleLed+0xc4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	2b32      	cmp	r3, #50	; 0x32
 80009ea:	d93a      	bls.n	8000a62 <handleLed+0xb6>
				HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);									// Toggle LED GPIO
 80009ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f0:	481e      	ldr	r0, [pc, #120]	; (8000a6c <handleLed+0xc0>)
 80009f2:	f000 fb34 	bl	800105e <HAL_GPIO_TogglePin>
				time	= HAL_GetTick();													// Load timer
 80009f6:	f000 f8bb 	bl	8000b70 <HAL_GetTick>
 80009fa:	4602      	mov	r2, r0
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <handleLed+0xc4>)
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	e02f      	b.n	8000a62 <handleLed+0xb6>
		if(!HAL_GPIO_ReadPin(LED_GPIO_Port,LED_Pin)){										// Read LED status, if 0 (LED on)
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	4819      	ldr	r0, [pc, #100]	; (8000a6c <handleLed+0xc0>)
 8000a08:	f000 fafa 	bl	8001000 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d113      	bne.n	8000a3a <handleLed+0x8e>
			if(HAL_GetTick()-time>20){														// If time elapsed > 20mS
 8000a12:	f000 f8ad 	bl	8000b70 <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <handleLed+0xc4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b14      	cmp	r3, #20
 8000a20:	d91f      	bls.n	8000a62 <handleLed+0xb6>
				HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin, SET);								// Turn the LED off
 8000a22:	2201      	movs	r2, #1
 8000a24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a28:	4810      	ldr	r0, [pc, #64]	; (8000a6c <handleLed+0xc0>)
 8000a2a:	f000 fb00 	bl	800102e <HAL_GPIO_WritePin>
				time	= HAL_GetTick();													// Load timer
 8000a2e:	f000 f89f 	bl	8000b70 <HAL_GetTick>
 8000a32:	4602      	mov	r2, r0
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <handleLed+0xc4>)
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	e013      	b.n	8000a62 <handleLed+0xb6>
			if(HAL_GetTick()-time>1000){													// If time elapsed > 1000mS
 8000a3a:	f000 f899 	bl	8000b70 <HAL_GetTick>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <handleLed+0xc4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a4a:	d90a      	bls.n	8000a62 <handleLed+0xb6>
				HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin, RESET);							// Turn the LED on
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <handleLed+0xc0>)
 8000a54:	f000 faeb 	bl	800102e <HAL_GPIO_WritePin>
				time	= HAL_GetTick();													// Load timer
 8000a58:	f000 f88a 	bl	8000b70 <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <handleLed+0xc4>)
 8000a60:	601a      	str	r2, [r3, #0]
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000002c 	.word	0x2000002c
 8000a6c:	40011000 	.word	0x40011000
 8000a70:	20000028 	.word	0x20000028

08000a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a76:	e003      	b.n	8000a80 <LoopCopyDataInit>

08000a78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a7e:	3104      	adds	r1, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a80:	480a      	ldr	r0, [pc, #40]	; (8000aac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a88:	d3f6      	bcc.n	8000a78 <CopyDataInit>
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a8c:	e002      	b.n	8000a94 <LoopFillZerobss>

08000a8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a90:	f842 3b04 	str.w	r3, [r2], #4

08000a94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a98:	d3f9      	bcc.n	8000a8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a9a:	f7ff fcb2 	bl	8000402 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f000 fee1 	bl	8001864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa2:	f7ff fb53 	bl	800014c <main>
  bx lr
 8000aa6:	4770      	bx	lr
  ldr r3, =_sidata
 8000aa8:	08001900 	.word	0x08001900
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ab0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000ab8:	20000060 	.word	0x20000060

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x28>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x28>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f907 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fc38 	bl	8000350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f911 	bl	8000d32 <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f8e7 	bl	8000cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x1c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x20>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <HAL_IncTick+0x20>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	2000005c 	.word	0x2000005c

08000b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <HAL_GetTick+0x10>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	2000005c 	.word	0x2000005c

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb0:	d301      	bcc.n	8000cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00f      	b.n	8000cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <SysTick_Config+0x40>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f7ff ff90 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SysTick_Config+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SysTick_Config+0x40>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ff49 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff5e 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ff90 	bl	8000c3c <NVIC_EncodePriority>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff5f 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffb0 	bl	8000ca0 <SysTick_Config>
 8000d40:	4603      	mov	r3, r0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b08b      	sub	sp, #44	; 0x2c
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5e:	e127      	b.n	8000fb0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d60:	2201      	movs	r2, #1
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f040 8116 	bne.w	8000faa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b12      	cmp	r3, #18
 8000d84:	d034      	beq.n	8000df0 <HAL_GPIO_Init+0xa4>
 8000d86:	2b12      	cmp	r3, #18
 8000d88:	d80d      	bhi.n	8000da6 <HAL_GPIO_Init+0x5a>
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d02b      	beq.n	8000de6 <HAL_GPIO_Init+0x9a>
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d804      	bhi.n	8000d9c <HAL_GPIO_Init+0x50>
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d031      	beq.n	8000dfa <HAL_GPIO_Init+0xae>
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d01c      	beq.n	8000dd4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d9a:	e048      	b.n	8000e2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d043      	beq.n	8000e28 <HAL_GPIO_Init+0xdc>
 8000da0:	2b11      	cmp	r3, #17
 8000da2:	d01b      	beq.n	8000ddc <HAL_GPIO_Init+0x90>
          break;
 8000da4:	e043      	b.n	8000e2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000da6:	4a89      	ldr	r2, [pc, #548]	; (8000fcc <HAL_GPIO_Init+0x280>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d026      	beq.n	8000dfa <HAL_GPIO_Init+0xae>
 8000dac:	4a87      	ldr	r2, [pc, #540]	; (8000fcc <HAL_GPIO_Init+0x280>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d806      	bhi.n	8000dc0 <HAL_GPIO_Init+0x74>
 8000db2:	4a87      	ldr	r2, [pc, #540]	; (8000fd0 <HAL_GPIO_Init+0x284>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d020      	beq.n	8000dfa <HAL_GPIO_Init+0xae>
 8000db8:	4a86      	ldr	r2, [pc, #536]	; (8000fd4 <HAL_GPIO_Init+0x288>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d01d      	beq.n	8000dfa <HAL_GPIO_Init+0xae>
          break;
 8000dbe:	e036      	b.n	8000e2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dc0:	4a85      	ldr	r2, [pc, #532]	; (8000fd8 <HAL_GPIO_Init+0x28c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d019      	beq.n	8000dfa <HAL_GPIO_Init+0xae>
 8000dc6:	4a85      	ldr	r2, [pc, #532]	; (8000fdc <HAL_GPIO_Init+0x290>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d016      	beq.n	8000dfa <HAL_GPIO_Init+0xae>
 8000dcc:	4a84      	ldr	r2, [pc, #528]	; (8000fe0 <HAL_GPIO_Init+0x294>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0xae>
          break;
 8000dd2:	e02c      	b.n	8000e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	623b      	str	r3, [r7, #32]
          break;
 8000dda:	e028      	b.n	8000e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	3304      	adds	r3, #4
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	e023      	b.n	8000e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	3308      	adds	r3, #8
 8000dec:	623b      	str	r3, [r7, #32]
          break;
 8000dee:	e01e      	b.n	8000e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	330c      	adds	r3, #12
 8000df6:	623b      	str	r3, [r7, #32]
          break;
 8000df8:	e019      	b.n	8000e2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d102      	bne.n	8000e08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e02:	2304      	movs	r3, #4
 8000e04:	623b      	str	r3, [r7, #32]
          break;
 8000e06:	e012      	b.n	8000e2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d105      	bne.n	8000e1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e10:	2308      	movs	r3, #8
 8000e12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69fa      	ldr	r2, [r7, #28]
 8000e18:	611a      	str	r2, [r3, #16]
          break;
 8000e1a:	e008      	b.n	8000e2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	615a      	str	r2, [r3, #20]
          break;
 8000e26:	e002      	b.n	8000e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
          break;
 8000e2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2bff      	cmp	r3, #255	; 0xff
 8000e32:	d801      	bhi.n	8000e38 <HAL_GPIO_Init+0xec>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	e001      	b.n	8000e3c <HAL_GPIO_Init+0xf0>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	2bff      	cmp	r3, #255	; 0xff
 8000e42:	d802      	bhi.n	8000e4a <HAL_GPIO_Init+0xfe>
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x104>
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	3b08      	subs	r3, #8
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	210f      	movs	r1, #15
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	401a      	ands	r2, r3
 8000e62:	6a39      	ldr	r1, [r7, #32]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 8096 	beq.w	8000faa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7e:	4b59      	ldr	r3, [pc, #356]	; (8000fe4 <HAL_GPIO_Init+0x298>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a58      	ldr	r2, [pc, #352]	; (8000fe4 <HAL_GPIO_Init+0x298>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b56      	ldr	r3, [pc, #344]	; (8000fe4 <HAL_GPIO_Init+0x298>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e96:	4a54      	ldr	r2, [pc, #336]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	220f      	movs	r2, #15
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4b      	ldr	r2, [pc, #300]	; (8000fec <HAL_GPIO_Init+0x2a0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0x19e>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4a      	ldr	r2, [pc, #296]	; (8000ff0 <HAL_GPIO_Init+0x2a4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d00d      	beq.n	8000ee6 <HAL_GPIO_Init+0x19a>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a49      	ldr	r2, [pc, #292]	; (8000ff4 <HAL_GPIO_Init+0x2a8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x196>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a48      	ldr	r2, [pc, #288]	; (8000ff8 <HAL_GPIO_Init+0x2ac>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_GPIO_Init+0x192>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x1a0>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e004      	b.n	8000eec <HAL_GPIO_Init+0x1a0>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e002      	b.n	8000eec <HAL_GPIO_Init+0x1a0>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x1a0>
 8000eea:	2300      	movs	r3, #0
 8000eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eee:	f002 0203 	and.w	r2, r2, #3
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	4093      	lsls	r3, r2
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000efc:	493a      	ldr	r1, [pc, #232]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f16:	4b39      	ldr	r3, [pc, #228]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4938      	ldr	r1, [pc, #224]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]
 8000f22:	e006      	b.n	8000f32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f24:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	4933      	ldr	r1, [pc, #204]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f3e:	4b2f      	ldr	r3, [pc, #188]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	492e      	ldr	r1, [pc, #184]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	604b      	str	r3, [r1, #4]
 8000f4a:	e006      	b.n	8000f5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	4929      	ldr	r1, [pc, #164]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d006      	beq.n	8000f74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	4924      	ldr	r1, [pc, #144]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	608b      	str	r3, [r1, #8]
 8000f72:	e006      	b.n	8000f82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	491f      	ldr	r1, [pc, #124]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d006      	beq.n	8000f9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	491a      	ldr	r1, [pc, #104]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	60cb      	str	r3, [r1, #12]
 8000f9a:	e006      	b.n	8000faa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	4915      	ldr	r1, [pc, #84]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	3301      	adds	r3, #1
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f47f aed0 	bne.w	8000d60 <HAL_GPIO_Init+0x14>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	372c      	adds	r7, #44	; 0x2c
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	10210000 	.word	0x10210000
 8000fd0:	10110000 	.word	0x10110000
 8000fd4:	10120000 	.word	0x10120000
 8000fd8:	10310000 	.word	0x10310000
 8000fdc:	10320000 	.word	0x10320000
 8000fe0:	10220000 	.word	0x10220000
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	40011000 	.word	0x40011000
 8000ff8:	40011400 	.word	0x40011400
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	4013      	ands	r3, r2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e001      	b.n	8001022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	807b      	strh	r3, [r7, #2]
 800103a:	4613      	mov	r3, r2
 800103c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800103e:	787b      	ldrb	r3, [r7, #1]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001044:	887a      	ldrh	r2, [r7, #2]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800104a:	e003      	b.n	8001054 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	041a      	lsls	r2, r3, #16
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	611a      	str	r2, [r3, #16]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001070:	887a      	ldrh	r2, [r7, #2]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4013      	ands	r3, r2
 8001076:	041a      	lsls	r2, r3, #16
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43d9      	mvns	r1, r3
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	400b      	ands	r3, r1
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	611a      	str	r2, [r3, #16]
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e26c      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8087 	beq.w	80011be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010b0:	4b92      	ldr	r3, [pc, #584]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d00c      	beq.n	80010d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010bc:	4b8f      	ldr	r3, [pc, #572]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d112      	bne.n	80010ee <HAL_RCC_OscConfig+0x5e>
 80010c8:	4b8c      	ldr	r3, [pc, #560]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d4:	d10b      	bne.n	80010ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d6:	4b89      	ldr	r3, [pc, #548]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d06c      	beq.n	80011bc <HAL_RCC_OscConfig+0x12c>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d168      	bne.n	80011bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e246      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f6:	d106      	bne.n	8001106 <HAL_RCC_OscConfig+0x76>
 80010f8:	4b80      	ldr	r3, [pc, #512]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a7f      	ldr	r2, [pc, #508]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 80010fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	e02e      	b.n	8001164 <HAL_RCC_OscConfig+0xd4>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10c      	bne.n	8001128 <HAL_RCC_OscConfig+0x98>
 800110e:	4b7b      	ldr	r3, [pc, #492]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a7a      	ldr	r2, [pc, #488]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b78      	ldr	r3, [pc, #480]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a77      	ldr	r2, [pc, #476]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e01d      	b.n	8001164 <HAL_RCC_OscConfig+0xd4>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0xbc>
 8001132:	4b72      	ldr	r3, [pc, #456]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a71      	ldr	r2, [pc, #452]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a6e      	ldr	r2, [pc, #440]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0xd4>
 800114c:	4b6b      	ldr	r3, [pc, #428]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a6a      	ldr	r2, [pc, #424]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b68      	ldr	r3, [pc, #416]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a67      	ldr	r2, [pc, #412]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001162:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d013      	beq.n	8001194 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fd00 	bl	8000b70 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fcfc 	bl	8000b70 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b64      	cmp	r3, #100	; 0x64
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e1fa      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b5d      	ldr	r3, [pc, #372]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0xe4>
 8001192:	e014      	b.n	80011be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fcec 	bl	8000b70 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fce8 	bl	8000b70 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	; 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e1e6      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	4b53      	ldr	r3, [pc, #332]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x10c>
 80011ba:	e000      	b.n	80011be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d063      	beq.n	8001292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ca:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011d6:	4b49      	ldr	r3, [pc, #292]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d11c      	bne.n	800121c <HAL_RCC_OscConfig+0x18c>
 80011e2:	4b46      	ldr	r3, [pc, #280]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d116      	bne.n	800121c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	4b43      	ldr	r3, [pc, #268]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <HAL_RCC_OscConfig+0x176>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d001      	beq.n	8001206 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e1ba      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4939      	ldr	r1, [pc, #228]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121a:	e03a      	b.n	8001292 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d020      	beq.n	8001266 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fca1 	bl	8000b70 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff fc9d 	bl	8000b70 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e19b      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4927      	ldr	r1, [pc, #156]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
 8001264:	e015      	b.n	8001292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fc80 	bl	8000b70 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff fc7c 	bl	8000b70 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e17a      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d03a      	beq.n	8001314 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d019      	beq.n	80012da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_RCC_OscConfig+0x274>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ac:	f7ff fc60 	bl	8000b70 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b4:	f7ff fc5c 	bl	8000b70 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e15a      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <HAL_RCC_OscConfig+0x26c>)
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f000 faa8 	bl	8001828 <RCC_Delay>
 80012d8:	e01c      	b.n	8001314 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_RCC_OscConfig+0x274>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e0:	f7ff fc46 	bl	8000b70 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e6:	e00f      	b.n	8001308 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e8:	f7ff fc42 	bl	8000b70 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d908      	bls.n	8001308 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e140      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	42420000 	.word	0x42420000
 8001304:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001308:	4b9e      	ldr	r3, [pc, #632]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1e9      	bne.n	80012e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80a6 	beq.w	800146e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001326:	4b97      	ldr	r3, [pc, #604]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10d      	bne.n	800134e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4b94      	ldr	r3, [pc, #592]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a93      	ldr	r2, [pc, #588]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b91      	ldr	r3, [pc, #580]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800134a:	2301      	movs	r3, #1
 800134c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134e:	4b8e      	ldr	r3, [pc, #568]	; (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	2b00      	cmp	r3, #0
 8001358:	d118      	bne.n	800138c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800135a:	4b8b      	ldr	r3, [pc, #556]	; (8001588 <HAL_RCC_OscConfig+0x4f8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a8a      	ldr	r2, [pc, #552]	; (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001366:	f7ff fc03 	bl	8000b70 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136e:	f7ff fbff 	bl	8000b70 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b64      	cmp	r3, #100	; 0x64
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e0fd      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001380:	4b81      	ldr	r3, [pc, #516]	; (8001588 <HAL_RCC_OscConfig+0x4f8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d106      	bne.n	80013a2 <HAL_RCC_OscConfig+0x312>
 8001394:	4b7b      	ldr	r3, [pc, #492]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a7a      	ldr	r2, [pc, #488]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6213      	str	r3, [r2, #32]
 80013a0:	e02d      	b.n	80013fe <HAL_RCC_OscConfig+0x36e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x334>
 80013aa:	4b76      	ldr	r3, [pc, #472]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a75      	ldr	r2, [pc, #468]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	6213      	str	r3, [r2, #32]
 80013b6:	4b73      	ldr	r3, [pc, #460]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4a72      	ldr	r2, [pc, #456]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	f023 0304 	bic.w	r3, r3, #4
 80013c0:	6213      	str	r3, [r2, #32]
 80013c2:	e01c      	b.n	80013fe <HAL_RCC_OscConfig+0x36e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d10c      	bne.n	80013e6 <HAL_RCC_OscConfig+0x356>
 80013cc:	4b6d      	ldr	r3, [pc, #436]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a6c      	ldr	r2, [pc, #432]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6213      	str	r3, [r2, #32]
 80013d8:	4b6a      	ldr	r3, [pc, #424]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4a69      	ldr	r2, [pc, #420]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6213      	str	r3, [r2, #32]
 80013e4:	e00b      	b.n	80013fe <HAL_RCC_OscConfig+0x36e>
 80013e6:	4b67      	ldr	r3, [pc, #412]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a66      	ldr	r2, [pc, #408]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	6213      	str	r3, [r2, #32]
 80013f2:	4b64      	ldr	r3, [pc, #400]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a63      	ldr	r2, [pc, #396]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d015      	beq.n	8001432 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff fbb3 	bl	8000b70 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140e:	f7ff fbaf 	bl	8000b70 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f241 3288 	movw	r2, #5000	; 0x1388
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e0ab      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001424:	4b57      	ldr	r3, [pc, #348]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0ee      	beq.n	800140e <HAL_RCC_OscConfig+0x37e>
 8001430:	e014      	b.n	800145c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fb9d 	bl	8000b70 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	e00a      	b.n	8001450 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f7ff fb99 	bl	8000b70 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	f241 3288 	movw	r2, #5000	; 0x1388
 8001448:	4293      	cmp	r3, r2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e095      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001450:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1ee      	bne.n	800143a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d105      	bne.n	800146e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001462:	4b48      	ldr	r3, [pc, #288]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a47      	ldr	r2, [pc, #284]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 8001468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800146c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8081 	beq.w	800157a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001478:	4b42      	ldr	r3, [pc, #264]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b08      	cmp	r3, #8
 8001482:	d061      	beq.n	8001548 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d146      	bne.n	800151a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148c:	4b3f      	ldr	r3, [pc, #252]	; (800158c <HAL_RCC_OscConfig+0x4fc>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fb6d 	bl	8000b70 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149a:	f7ff fb69 	bl	8000b70 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e067      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ac:	4b35      	ldr	r3, [pc, #212]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c0:	d108      	bne.n	80014d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014c2:	4b30      	ldr	r3, [pc, #192]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	492d      	ldr	r1, [pc, #180]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a19      	ldr	r1, [r3, #32]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	430b      	orrs	r3, r1
 80014e6:	4927      	ldr	r1, [pc, #156]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <HAL_RCC_OscConfig+0x4fc>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb3d 	bl	8000b70 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fa:	f7ff fb39 	bl	8000b70 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e037      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x46a>
 8001518:	e02f      	b.n	800157a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_RCC_OscConfig+0x4fc>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fb26 	bl	8000b70 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff fb22 	bl	8000b70 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e020      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x498>
 8001546:	e018      	b.n	800157a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d101      	bne.n	8001554 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e013      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_OscConfig+0x4f4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	429a      	cmp	r2, r3
 8001566:	d106      	bne.n	8001576 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	429a      	cmp	r2, r3
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	40007000 	.word	0x40007000
 800158c:	42420060 	.word	0x42420060

08001590 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0d0      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015a4:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d910      	bls.n	80015d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b67      	ldr	r3, [pc, #412]	; (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 0207 	bic.w	r2, r3, #7
 80015ba:	4965      	ldr	r1, [pc, #404]	; (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b63      	ldr	r3, [pc, #396]	; (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0b8      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ec:	4b59      	ldr	r3, [pc, #356]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4a58      	ldr	r2, [pc, #352]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001604:	4b53      	ldr	r3, [pc, #332]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a52      	ldr	r2, [pc, #328]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800160e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	494d      	ldr	r1, [pc, #308]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	4313      	orrs	r3, r2
 8001620:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d040      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d115      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e07f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164e:	4b41      	ldr	r3, [pc, #260]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e073      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e06b      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166e:	4b39      	ldr	r3, [pc, #228]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f023 0203 	bic.w	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4936      	ldr	r1, [pc, #216]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001680:	f7ff fa76 	bl	8000b70 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	e00a      	b.n	800169e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001688:	f7ff fa72 	bl	8000b70 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	; 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e053      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 020c 	and.w	r2, r3, #12
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d1eb      	bne.n	8001688 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d210      	bcs.n	80016e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 0207 	bic.w	r2, r3, #7
 80016c6:	4922      	ldr	r1, [pc, #136]	; (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e032      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4916      	ldr	r1, [pc, #88]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	490e      	ldr	r1, [pc, #56]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800171e:	f000 f821 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8001722:	4601      	mov	r1, r0
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_RCC_ClockConfig+0x1c8>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	fa21 f303 	lsr.w	r3, r1, r3
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <HAL_RCC_ClockConfig+0x1cc>)
 8001738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_ClockConfig+0x1d0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f9d4 	bl	8000aec <HAL_InitTick>

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40022000 	.word	0x40022000
 8001754:	40021000 	.word	0x40021000
 8001758:	080018e8 	.word	0x080018e8
 800175c:	20000000 	.word	0x20000000
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	b490      	push	{r4, r7}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb0>)
 800176c:	1d3c      	adds	r4, r7, #4
 800176e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001770:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800178e:	4b23      	ldr	r3, [pc, #140]	; (800181c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b04      	cmp	r3, #4
 800179c:	d002      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x40>
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d003      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0x46>
 80017a2:	e02d      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017a4:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017a6:	623b      	str	r3, [r7, #32]
      break;
 80017a8:	e02d      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	0c9b      	lsrs	r3, r3, #18
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017b6:	4413      	add	r3, r2
 80017b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	0c5b      	lsrs	r3, r3, #17
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017d6:	4413      	add	r3, r2
 80017d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017e2:	fb02 f203 	mul.w	r2, r2, r3
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
 80017ee:	e004      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017f4:	fb02 f303 	mul.w	r3, r2, r3
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	623b      	str	r3, [r7, #32]
      break;
 80017fe:	e002      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001802:	623b      	str	r3, [r7, #32]
      break;
 8001804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001806:	6a3b      	ldr	r3, [r7, #32]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3728      	adds	r7, #40	; 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bc90      	pop	{r4, r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	080018d4 	.word	0x080018d4
 8001818:	080018e4 	.word	0x080018e4
 800181c:	40021000 	.word	0x40021000
 8001820:	007a1200 	.word	0x007a1200
 8001824:	003d0900 	.word	0x003d0900

08001828 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <RCC_Delay+0x34>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <RCC_Delay+0x38>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	0a5b      	lsrs	r3, r3, #9
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001844:	bf00      	nop
  }
  while (Delay --);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	60fa      	str	r2, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f9      	bne.n	8001844 <RCC_Delay+0x1c>
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000000 	.word	0x20000000
 8001860:	10624dd3 	.word	0x10624dd3

08001864 <__libc_init_array>:
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	2500      	movs	r5, #0
 8001868:	4e0c      	ldr	r6, [pc, #48]	; (800189c <__libc_init_array+0x38>)
 800186a:	4c0d      	ldr	r4, [pc, #52]	; (80018a0 <__libc_init_array+0x3c>)
 800186c:	1ba4      	subs	r4, r4, r6
 800186e:	10a4      	asrs	r4, r4, #2
 8001870:	42a5      	cmp	r5, r4
 8001872:	d109      	bne.n	8001888 <__libc_init_array+0x24>
 8001874:	f000 f822 	bl	80018bc <_init>
 8001878:	2500      	movs	r5, #0
 800187a:	4e0a      	ldr	r6, [pc, #40]	; (80018a4 <__libc_init_array+0x40>)
 800187c:	4c0a      	ldr	r4, [pc, #40]	; (80018a8 <__libc_init_array+0x44>)
 800187e:	1ba4      	subs	r4, r4, r6
 8001880:	10a4      	asrs	r4, r4, #2
 8001882:	42a5      	cmp	r5, r4
 8001884:	d105      	bne.n	8001892 <__libc_init_array+0x2e>
 8001886:	bd70      	pop	{r4, r5, r6, pc}
 8001888:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800188c:	4798      	blx	r3
 800188e:	3501      	adds	r5, #1
 8001890:	e7ee      	b.n	8001870 <__libc_init_array+0xc>
 8001892:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001896:	4798      	blx	r3
 8001898:	3501      	adds	r5, #1
 800189a:	e7f2      	b.n	8001882 <__libc_init_array+0x1e>
 800189c:	080018f8 	.word	0x080018f8
 80018a0:	080018f8 	.word	0x080018f8
 80018a4:	080018f8 	.word	0x080018f8
 80018a8:	080018fc 	.word	0x080018fc

080018ac <memset>:
 80018ac:	4603      	mov	r3, r0
 80018ae:	4402      	add	r2, r0
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d100      	bne.n	80018b6 <memset+0xa>
 80018b4:	4770      	bx	lr
 80018b6:	f803 1b01 	strb.w	r1, [r3], #1
 80018ba:	e7f9      	b.n	80018b0 <memset+0x4>

080018bc <_init>:
 80018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018be:	bf00      	nop
 80018c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018c2:	bc08      	pop	{r3}
 80018c4:	469e      	mov	lr, r3
 80018c6:	4770      	bx	lr

080018c8 <_fini>:
 80018c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ca:	bf00      	nop
 80018cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ce:	bc08      	pop	{r3}
 80018d0:	469e      	mov	lr, r3
 80018d2:	4770      	bx	lr
